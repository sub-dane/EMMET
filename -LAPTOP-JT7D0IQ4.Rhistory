openxlsx::writeData(wb,sheet,as.data.frame(Enunciado),
startRow = (nrow(tabla1)+17), startCol = 1,colNames=FALSE, rowNames=FALSE)
filas_pares <- seq(12, nrow(tabla1)+12, by = 2)
filas_impares <- seq(13, nrow(tabla1)+12, by = 2)
addStyle(wb, sheet, style=colgr, rows = filas_pares, cols = 1:ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=colbl, rows = filas_impares, cols = 1:ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=ultbl, rows = (nrow(tabla1)+12), cols = 1:ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=ultcgr, rows = filas_pares, cols = ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=ultcbl, rows = filas_impares, cols = ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=colbl, rows = (nrow(tabla1)+14):(nrow(tabla1)+17), cols = 1:ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=rowbl, rows = (nrow(tabla1)+14), cols = 1:ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=ultcbl, rows = (nrow(tabla1)+14):(nrow(tabla1)+17), cols = ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=ultrbl, rows = (nrow(tabla1)+17), cols = 1:ncol(tabla1), gridExpand = TRUE)
# 15. Índices Ciudades ----------------------------------------------------
#Calculo de la contribucion total
contribucion_total <- data %>%
group_by(CIUDAD,ANIO,MES)
#contribucion_total <- cont_tot_summ(contribucion_total,4)
contribucion_total <- contribucion_total  %>%
summarise(produccionNom_total = sum(PRODUCCIONNOMPOND),
produccion_total = sum(PRODUCCIONREALPOND),
ventasnom_total=sum(VENTASNOMINPOND),
ventas_total=sum(VENTASREALESPOND),
personal_total=sum(TOTPERS))
#Calculo de la contribucion mensual por ciudad
contribucion_total <- contribucion_total %>%
group_by(CIUDAD,ANIO)
#contribucion_total <- cont_tot_summ(contribucion_total,3)
contribucion_total <- contribucion_total  %>%
filter(ANIO==2018) %>%
summarise(produccionNom_total = mean(produccionNom_total),
produccion_total = mean(produccion_total),
ventasnom_total=mean(ventasnom_total),
ventas_total=mean(ventas_total),
personal_total=mean(personal_total))
#Calculo de los indices
contribucion_mensual <- data %>%
group_by(CIUDAD,ANIO,MES)
#contribucion_mensual <- cont_summ(contribucion_mensual,4)
contribucion_mensual <- contribucion_mensual %>%
summarise(produccionNom_mensual = sum(PRODUCCIONNOMPOND),
produccion_mensual = sum(PRODUCCIONREALPOND),
ventasnom_mensual=sum(VENTASNOMINPOND),
ventas_mensual=sum(VENTASREALESPOND),
personal_mensual=sum(TOTPERS))
contribucion<-contribucion_mensual %>%
left_join(contribucion_total,by=c("CIUDAD"="CIUDAD"))
# tabla1 <- tabla_sum_mut(contribucion,2) %>%
#   select(CIUDAD,ANIO,MES,produccionNom,
#          produccion,ventasnom,ventas,personal)
tabla1<-contribucion %>%
mutate(produccionNom=(produccionNom_mensual/produccionNom_total)*100,
produccion   =(produccion_mensual/produccion_total)*100,
ventasnom    =(ventasnom_mensual/ventasnom_total)*100,
ventas       =(ventas_mensual/ventas_total)*100,
personal     =(personal_mensual/personal_total)*100) %>%
select(CIUDAD,ANIO.x,MES,produccionNom,
produccion,ventasnom,ventas,personal)
tabla1 <- tabla1 %>% inner_join(ciudades, by=c("CIUDAD"="CIUDAD"))
tabla1 <- tabla1 %>% arrange(ORDEN_CIUDAD)
tabla1 <- tabla1[,-ncol(tabla1)]
#Exportar
sheet <- sheets[17]
openxlsx::writeData(wb,sheet,as.data.frame(tabla1),
startRow = 12, startCol = 1,colNames=FALSE, rowNames=FALSE)
Enunciado<-paste0("Enero 2018 - ",meses_enu[mes]," ",anio)
openxlsx::writeData(wb,sheet,as.data.frame(Enunciado),
startRow = 8, startCol = 1,colNames=FALSE, rowNames=FALSE)
Enunciado<-paste0("Fecha de publicación ",meses_enu[mes]," de ",anio)
openxlsx::writeData(wb,sheet,as.data.frame(Enunciado),
startRow = (nrow(tabla1)+14), startCol = 1,colNames=FALSE, rowNames=FALSE)
Enunciado<-paste0("Fuente. DANE - EMMET")
openxlsx::writeData(wb,sheet,as.data.frame(Enunciado),
startRow = (nrow(tabla1)+15), startCol = 1,colNames=FALSE, rowNames=FALSE)
Enunciado<-paste0("p: provisionales")
openxlsx::writeData(wb,sheet,as.data.frame(Enunciado),
startRow = (nrow(tabla1)+16), startCol = 1,colNames=FALSE, rowNames=FALSE)
Enunciado<-paste0("Nota: La diferencia entre el total y la suma de los dominios se debe a aproximaciones decimales")
openxlsx::writeData(wb,sheet,as.data.frame(Enunciado),
startRow = (nrow(tabla1)+17), startCol = 1,colNames=FALSE, rowNames=FALSE)
filas_pares <- seq(12, nrow(tabla1)+12, by = 2)
filas_impares <- seq(13, nrow(tabla1)+12, by = 2)
addStyle(wb, sheet, style=colgr, rows = filas_pares, cols = 1:ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=colbl, rows = filas_impares, cols = 1:ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=ultbl, rows = (nrow(tabla1)+12), cols = 1:ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=ultcgr, rows = filas_pares, cols = ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=ultcbl, rows = filas_impares, cols = ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=rowbl, rows = (nrow(tabla1)+14), cols = 1:ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=colbl, rows = (nrow(tabla1)+14):(nrow(tabla1)+17), cols = 1:ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=ultcbl, rows = (nrow(tabla1)+14):(nrow(tabla1)+17), cols = ncol(tabla1), gridExpand = TRUE)
addStyle(wb, sheet, style=ultrbl, rows = (nrow(tabla1)+17), cols = 1:ncol(tabla1), gridExpand = TRUE)
# # 16. Var y Cont Trienal Dpto  --------------------------------------------
#
# #Calculo de la contribucion total
# contribucion_total <- data %>%
#   filter(MES==mes & ANIO%in%c(2019))
# contribucion_total <- cont_tot_summ(contribucion_total,1)
#
# #Calculo de la contribucion mensual
# contribucion <- data %>%
#   filter(MES==mes & ANIO%in%c(anio,2019)) %>%
#   mutate(PERSONAL=TOTPERS) %>%
#   group_by(ANIO,MES,INCLUSION_NOMBRE_DEPTO)
# contribucion <- cont_summ(contribucion,1) %>%
#   group_by(INCLUSION_NOMBRE_DEPTO)
# contribucion <- cont_summ(contribucion,2) %>%
#   arrange(produccion)
#
#
# #Calculo de la variación por dpto
# tabla1 <- data %>%
#   filter(ANIO%in%c(anio,2019) & MES%in%mes) %>%
#   group_by(ANIO,MES,INCLUSION_NOMBRE_DEPTO)
# tabla1 <- tabla_sum_mut(tabla1,1)
#
# tabla1 <- tabla_piv_pas(tabla1,3)
# tabla1 <- tabla1 %>% pivot_longer(cols = colnames(tabla1)[-c(1:5)],names_to = "variables",values_to = "value" )
#
# tabla1 <- tabla_sapp(tabla1)
#
# #Empalme de la contribucion y la variacion
# tabla1 <- inner_join(x=tabla1,y=contribucion,by=c("INCLUSION_NOMBRE_DEPTO"))
# tabla1 <- tabla1[,c("INCLUSION_NOMBRE_DEPTO","varprodnom",
#                     "varprod","produccion","varventasnom","varventas","ventas",
#                     "varpersonas","personal")]
#
# for( i in c("varprodnom",
#             "varprod","produccion","varventasnom","varventas","ventas",
#             "varpersonas","personal")){
#   tabla1[,i] <-  tabla1[,i]*100
# }
#
# tabla1 <- tabla1 %>% inner_join(deptos, by=c("INCLUSION_NOMBRE_DEPTO"="INCLUSION_NOMBRE_DEPTO"))
# tabla1 <- tabla1 %>% arrange(ORDEN_DEPTO)
# tabla1 <- tabla1[,-ncol(tabla1)]
#
# #Total Industria
#
# #Calculo de la contribucion mensual
# contribucion1 <- data %>%
#   filter(MES==mes & ANIO%in%c(anio,2019)) %>%
#   mutate(PERSONAL=TOTPERS) %>%
#   group_by(ANIO,MES)
# contribucion1 <- cont_summ(contribucion1,1)
# contribucion1["INCLUSION_NOMBRE_DEPTO"] <- "Total Industria"
# contribucion1 <- contribucion1 %>%
#   group_by(INCLUSION_NOMBRE_DEPTO)
# contribucion1 <- cont_summ(contribucion1,2)
#
#
# #Calculo de la variación por dpto
# tabla2 <- data %>%
#   filter(ANIO%in%c(anio,2019) & MES%in%mes) %>%
#   group_by(ANIO,MES)
# tabla2 <- tabla_sum_mut(tabla2,1)
#
# tabla2 <- tabla_piv_pas(tabla2,3)
# tabla2 <- tabla2 %>% pivot_longer(cols = colnames(tabla2)[-c(1:5)],names_to = "variables",values_to = "value" )
#
# tabla2 <- tabla_sapp(tabla2)
#
# tabla2["INCLUSION_NOMBRE_DEPTO"] <- "Total Industria"
#
# #Empalme de la contribucion y la variacion
# tabla2 <- inner_join(x=tabla2,y=contribucion1,by=c("INCLUSION_NOMBRE_DEPTO"))
# tabla2 <- tabla2[,c("INCLUSION_NOMBRE_DEPTO","varprodnom",
#                     "varprod","produccion","varventasnom","varventas","ventas",
#                     "varpersonas","personal")]
#
# for( i in c("varprodnom",
#             "varprod","produccion","varventasnom","varventas","ventas",
#             "varpersonas","personal")){
#   tabla2[,i] <-  tabla2[,i]*100
# }
#
#
# tabla1_1 <- rbind(tabla2,tabla1)
#
#
# #Exportar
#
# sheet <- sheets[[18]]
# addDataFrame(data.frame(tabla1_1), sheet, col.names=FALSE, row.names=FALSE, startRow = 12, startColumn = 1)
#
#
# Enunciado<-paste0(meses_enu[mes]," (",anio,"/","2019)p")
# addDataFrame(data.frame(Enunciado), sheet, col.names=FALSE, row.names=FALSE, startRow = 8, startColumn = 1)
#
# Enunciado<-paste0("Fecha de publicación ",meses_enu[mes]," de ",anio)
# addDataFrame(data.frame(Enunciado), sheet, col.names=FALSE, row.names=FALSE,
#              startRow = 28, startColumn = 1)
#
# # 17. Var y Cont Trienal Desagre  -----------------------------------------
#
# #Calculo de la contribucion total
# contribucion_total <- data %>%
#   filter(MES==mes & ANIO%in%c(2019)) %>%
#   group_by(INCLUSION_NOMBRE_DEPTO)
# contribucion_total <- cont_tot_summ(contribucion_total,2)
#
# #Calculo de la contribucion mensual
# contribucion <- data %>%
#   filter(MES==mes & ANIO%in%c(anio,2019)) %>%
#   mutate(PERSONAL=TOTPERS) %>%
#   group_by(ANIO,INCLUSION_NOMBRE_DEPTO,ORDENDOMINDEPTO,AGREG_DOMINIO_REG)
# contribucion <- cont_summ(contribucion,3) %>%
#   arrange(produccion)
#
# contribucion_sector<-contribucion %>%
#   left_join(contribucion_total,by=c("INCLUSION_NOMBRE_DEPTO"="INCLUSION_NOMBRE_DEPTO"))
#
# contribucion<- cont_summ(contribucion_sector,5)
#
# #Calculo de la variacion
# tabla1 <- data %>%
#   filter(ANIO%in%c(anio,2019) & MES%in%mes) %>%
#   group_by(ANIO,INCLUSION_NOMBRE_DEPTO,ORDENDOMINDEPTO,AGREG_DOMINIO_REG)
# tabla1 <- tabla_sum_mut(tabla1,1)
#
# tabla1 <- tabla_piv_pas(tabla1,3)
# tabla1 <- tabla1 %>% pivot_longer(cols = colnames(tabla1)[-c(1:4)],names_to = "variables",values_to = "value" )
#
# tabla1 <- tabla_sapp(tabla1)
#
# #Empalme de la contribucion y la variacion
# tabla1 <- tabla1 %>%
#   inner_join(y=contribucion,by=c("INCLUSION_NOMBRE_DEPTO"="INCLUSION_NOMBRE_DEPTO",
#                                  "ORDENDOMINDEPTO"="ORDENDOMINDEPTO"))
#
# tabla1 <- tabla1[,c("INCLUSION_NOMBRE_DEPTO","AGREG_DOMINIO_REG","varprodnom",
#                     "varprod","produccion","varventasnom","varventas","ventas",
#                     "varpersonas","personas")]
#
#
# for( i in c("varprodnom","varprod","produccion","varventasnom",
#             "varventas","ventas","varpersonas","personas")){
#   tabla1[,i] <-  tabla1[,i]*100
# }
#
# tabla1_1["AGREG_DOMINIO_REG"]<- ""
# tabla1_1 <- tabla1_1 %>%
#   rename(personas=personal)
# tabla1_1 <- tabla1_1 %>%
#   select(names(tabla1))
# tabla1_1 <- tabla1_1[2:nrow(tabla1_1),]
# tabla1_1$produccion <- tabla1_1$varprod
# tabla1_1$ventas <- tabla1_1$varventas
# tabla1_1$personas <- tabla1_1$varpersonas
#
# conteo <- tabla1 %>%
#   group_by(INCLUSION_NOMBRE_DEPTO) %>%
#   summarise(Total=n()) %>%
#   filter(Total==1)
#
# tabla1_1 <- tabla1_1 %>%
#   filter( !INCLUSION_NOMBRE_DEPTO %in% conteo$INCLUSION_NOMBRE_DEPTO)
#
# tabla1 <- rbind(tabla1_1,tabla1)
#
# tabla1 <- tabla1 %>% inner_join(deptos, by=c("INCLUSION_NOMBRE_DEPTO"="INCLUSION_NOMBRE_DEPTO"))
# tabla1 <- tabla1 %>% arrange(ORDEN_DEPTO)
# tabla1 <- tabla1[,-ncol(tabla1)]
#
#
# tabla2["AGREG_DOMINIO_REG"]<- ""
# tabla2 <- tabla2 %>%
#   rename(personas=personal)
# tabla2 <- tabla2 %>%
#   select(names(tabla1))
#
# tabla1 <- rbind(tabla2,tabla1)
#
# #Exportar
#
# sheet <- sheets[[19]]
# addDataFrame(data.frame(tabla1), sheet, col.names=FALSE, row.names=FALSE, startRow = 12, startColumn = 1)
#
#
# Enunciado<-paste0(meses_enu[mes]," (",anio,"/","2019)p")
# addDataFrame(data.frame(Enunciado), sheet, col.names=FALSE, row.names=FALSE, startRow = 8, startColumn = 1)
#
# Enunciado<-paste0("Fecha de publicación ",meses_enu[mes]," de ",anio)
# addDataFrame(data.frame(Enunciado), sheet, col.names=FALSE, row.names=FALSE,
#              startRow = 93, startColumn = 1)
#
# # 18.Var y Cont Trienal Áreas me ------------------------------------------
#
# #Calculo de la contribucion total
# contribucion_total <- data %>%
#   filter(MES==mes & ANIO%in%c(2019))
# contribucion_total <- cont_tot_summ(contribucion_total,1)
#
# #Calculo de la contribucion mensual por area mtp
# contribucion <- data %>%
#   filter(MES==mes & ANIO%in%c(anio,2019)) %>%
#   mutate(PERSONAL=TOTPERS) %>%
#   group_by(ANIO,MES,AREA_METROPOLITANA)
# contribucion <- cont_summ(contribucion,1) %>%
#   group_by(AREA_METROPOLITANA)
# contribucion <- cont_summ(contribucion,2) %>%
#   arrange(produccion)
#
#
# #Calculo de la variacion por area mtp
# tabla1 <- data %>%
#   filter(ANIO%in%c(anio,2019) & MES%in%mes) %>%
#   group_by(ANIO,MES,AREA_METROPOLITANA)
# tabla1 <- tabla_sum_mut(tabla1,1)
#
# tabla1 <- tabla_piv_pas(tabla1,3)
# tabla1 <- tabla1 %>% pivot_longer(cols = colnames(tabla1)[-c(1:5)],names_to = "variables",values_to = "value" )
#
# tabla1 <- tabla_sapp(tabla1)
#
# #Empalme de la contribucion y la variacion
# tabla1 <- inner_join(x=tabla1,y=contribucion,by=c("AREA_METROPOLITANA"))
# tabla1 <- tabla1[,c("AREA_METROPOLITANA","varprodnom",
#                     "varprod","produccion","varventasnom","varventas","ventas",
#                     "varpersonas","personal")]
#
# for( i in c("varprodnom",
#             "varprod","produccion","varventasnom","varventas","ventas",
#             "varpersonas","personal")){
#   tabla1[,i] <-  tabla1[,i]*100
# }
#
#
# tabla1 <- tabla1 %>% inner_join(areas, by=c("AREA_METROPOLITANA"="AREA_METROPOLITANA"))
# tabla1 <- tabla1 %>% arrange(ORDEN_AREA)
# tabla1 <- tabla1[,-ncol(tabla1)]
#
#
# tabla2 <- tabla2 %>%
#   rename(personal=personas,
#          AREA_METROPOLITANA=INCLUSION_NOMBRE_DEPTO)
# tabla2 <- tabla2 %>%
#   select(names(tabla1))
# tabla1 <- rbind(tabla2,tabla1)
#
#
#
# #Exportar
#
# sheet <- sheets[[20]]
# addDataFrame(data.frame(tabla1), sheet, col.names=FALSE, row.names=FALSE, startRow = 12, startColumn = 1)
#
#
# Enunciado<-paste0(meses_enu[mes]," (",anio,"/","2019)p")
# addDataFrame(data.frame(Enunciado), sheet, col.names=FALSE, row.names=FALSE, startRow = 8, startColumn = 1)
#
# Enunciado<-paste0("Fecha de publicación ",meses_enu[mes]," de ",anio)
# addDataFrame(data.frame(Enunciado), sheet, col.names=FALSE, row.names=FALSE,
#              startRow = 18, startColumn = 1)
#
# # 19. Var y Cont Trienal Ciudad ------------------------------------------
#
# #Calculo de la contribucion total
# contribucion_total <- data %>%
#   filter(MES==mes & ANIO%in%c(2019))
# contribucion_total <- cont_tot_summ(contribucion_total,1)
#
# #Calculo de la contribucion mensual por ciudad
# contribucion <- data %>%
#   filter(MES==mes & ANIO%in%c(anio,2019)) %>%
#   mutate(PERSONAL=TOTPERS) %>%
#   group_by(ANIO,MES,CIUDAD)
# contribucion <- cont_summ(contribucion,1) %>%
#   group_by(CIUDAD)
# contribucion <- cont_summ(contribucion,2) %>%
#   arrange(produccion)
#
#
# #Calculo de la variacion por ciudad
# tabla1 <- data %>%
#   filter(ANIO%in%c(anio,2019) & MES%in%mes) %>%
#   group_by(ANIO,MES,CIUDAD)
# tabla1 <- tabla_sum_mut(tabla1,1)
#
# tabla1 <- tabla_piv_pas(tabla1,3)
# tabla1 <- tabla1 %>% pivot_longer(cols = colnames(tabla1)[-c(1:2)],names_to = "variables",values_to = "value" )
#
# tabla1 <- tabla_sapp(tabla1)
#
# #Empalme de la contribucion y la variacion
# tabla1 <- inner_join(x=tabla1,y=contribucion,by=c("CIUDAD"))
# tabla1 <- tabla1[,c("CIUDAD","varprodnom",
#                     "varprod","produccion","varventasnom","varventas","ventas",
#                     "varpersonas","personal")]
#
#
# for( i in c("varprodnom","varprod","produccion","varventasnom",
#             "varventas","ventas","varpersonas","personal")){
#   tabla1[,i] <-  tabla1[,i]*100
# }
#
# tabla1 <- tabla1 %>% inner_join(ciudades, by=c("CIUDAD"="CIUDAD"))
# tabla1 <- tabla1 %>% arrange(ORDEN_CIUDAD)
# tabla1 <- tabla1[,-ncol(tabla1)]
#
# tabla2 <- tabla2 %>%
#   rename(CIUDAD=AREA_METROPOLITANA)
# tabla2 <- tabla2 %>%
#   select(names(tabla1))
# tabla1 <- rbind(tabla2,tabla1)
#
#
# #Exportar
#
# sheet <- sheets[[21]]
# addDataFrame(data.frame(tabla1), sheet, col.names=FALSE, row.names=FALSE, startRow = 12, startColumn = 1)
#
#
# Enunciado<-paste0(meses_enu[mes]," (",anio,"/","2019)p")
# addDataFrame(data.frame(Enunciado), sheet, col.names=FALSE, row.names=FALSE, startRow = 8, startColumn = 1)
#
# Enunciado<-paste0("Fecha de publicación ",meses_enu[mes]," de ",anio)
# addDataFrame(data.frame(Enunciado), sheet, col.names=FALSE, row.names=FALSE,
#              startRow = 24, startColumn = 1)
#
# Guardar archivo de salida -----------------------------------------------
openxlsx::saveWorkbook(wb,Salida,overwrite = TRUE)
library(rmarkdown)
library(installr)
library(readxl)
library(lubridate)
if (!rmarkdown::pandoc_available()) {
# Si no está configurado correctamente, instalar pandoc
url <- "https://github.com/jgm/pandoc/releases/tag/3.1.6.1/pandoc-3.1.6.1-windows-x86_64.msi"
dest_path <- paste0(directorio,"/pandoc-3.1.6.1-windows-x86_64.msi")
download.file(url, dest_path, method = "auto")
system(paste("msiexec /i", shQuote(dest_path)))
}
if (!tinytex:::is_tinytex()) {
# Si no está configurado correctamente, instalar TinyTeX
tinytex::install_tinytex()
}
# Definir la URL de la carpeta boletin en GitHub
url_boletin <- "https://github.com/NataliArteaga/DANE.EMMET/raw/main/boletin.zip"
# Descargar y descomprimir la carpeta boletin
archivo_zip <- file.path(directorio, "boletin.zip")
download.file(url_boletin, destfile = archivo_zip)
unzip(archivo_zip, exdir = file.path(directorio, "boletin"))
# Definir la ruta del archivo boletin.Rmd en la carpeta descargada
if (tipo == "word") {
ruta_boletin_rmd <- file.path(directorio, "boletin","boletin", "boletin_versionW.Rmd")
} else {
ruta_boletin_rmd <- file.path(directorio, "boletin","boletin", "boletin_versionP.Rmd")
}
tipo="word"
# Descargar y descomprimir la carpeta boletin
archivo_zip <- file.path(directorio, "boletin.zip")
download.file(url_boletin, destfile = archivo_zip)
unzip(archivo_zip, exdir = file.path(directorio, "boletin"))
if (tipo == "word") {
ruta_boletin_rmd <- file.path(directorio, "boletin","boletin", "boletin_versionW.Rmd")
} else {
ruta_boletin_rmd <- file.path(directorio, "boletin","boletin", "boletin_versionP.Rmd")
}
parametros <- as.data.frame(read_excel(paste0(directorio,"/results/S6_boletin/parametros_boletin.xlsx")))
meses_b <- c("Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre")
# Creamos una función para obtener el nombre del mes en español
nombre_mes_espanol <- function(fecha) {
return(meses_b[month(fecha)])
}
# Formateamos la fecha en el formato deseado
fecha_formateada1 <- paste(day(Sys.Date()), "de", nombre_mes_espanol(Sys.Date()), "de", year(Sys.Date()))
fecha_formateada2 <- paste0(day(Sys.Date()), "de", nombre_mes_espanol(Sys.Date()), "de", year(Sys.Date()))
# Renderizar el archivo Rmd localmente
rmarkdown::render(ruta_boletin_rmd, output_format=paste0(tipo, "_document"),
params = list(month = mes,
year = anio,
month_b= meses_b[mes],
fecha_publicacion = fecha_formateada1,
directorio = directorio,
IC_prod= parametros[1,2],
IC_ven= parametros[2,2],
IC_empl= parametros[3,2],
TNR= parametros[4,2],
TI_prod= parametros[5,2],
TI_ven=parametros[6,2],
TI_empl= parametros[7,2],
Anio_grafico=parametros[8,2]
),
output_file = paste0("boletin_", fecha_formateada2),
output_dir = file.path(directorio, "results", "S6_boletin"))
library(rmarkdown)
library(readxl)
library(lubridate)
library(shiny)
source("https://raw.githubusercontent.com/sub-dane/EMMET/main/R/utils.R")
assign("directorio", directorio, envir = .GlobalEnv)
assign("mes", mes, envir = .GlobalEnv)
assign("anio", anio, envir = .GlobalEnv)
url_boletin <- "https://github.com/NataliArteaga/DANE.EMMET/raw/main/Shiny_alertas.zip"
# Descargar y descomprimir la carpeta shiny
archivo_zip <- file.path(directorio, "Shiny_alertas.zip")
download.file(url_boletin, destfile = archivo_zip)
unzip(archivo_zip, exdir = file.path(directorio))
ruta_app_shiny <- file.path(directorio,"Shiny_alertas/app_fun_critica_2.R")
ruta_archivo_excel<-paste0(directorio,"/results/S4_tematica/EMMET_PANEL_tematica_",meses[mes],anio,".csv")
#identificar si el archivo de tematica existe
if (!file.exists(ruta_archivo_excel)) {
# Si el archivo no está presente, ejecuta la función f4_imputacion y f5_tematica
f3_imputacion(directorio,mes,anio)
f4_tematica(directorio,mes,anio)
} else {
}
#función que corre la app
shiny::runApp(
appDir = ruta_app_shiny,
launch.browser = TRUE  # Esto abrirá automáticamente el navegador para mostrar la aplicación
)
