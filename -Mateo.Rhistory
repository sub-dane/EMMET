NPERS_ET,AJU_SUELD_ET,NPERS_ETA,AJU_SUELD_ETA,NPERS_APREA,AJU_SUELD_APREA,
NPERS_OP,AJU_SUELD_OP,NPERS_OT,AJU_SUELD_OT,NPERS_OTA,AJU_SUELD_OTA,
NPERS_APREO,AJU_SUELD_APREO,AJU_HORAS_ORDI,AJU_HORAS_EXT,
AJU_PRODUCCION,AJU_VENTASIN,AJU_VENTASEX,EXISTENCIAS,ends_with("caso_de_imputacion")) %>% arrange(NORDEST) %>% as.data.frame()
final <- final %>%
mutate(
TOTAL_VENTAS=(AJU_VENTASIN+AJU_VENTASEX),
TOTAL_HORAS= (AJU_HORAS_ORDI+AJU_HORAS_EXT),
TOT_PERS=(NPERS_EP+NPERS_ET+NPERS_ETA+
NPERS_APREA+NPERS_OP+NPERS_OT+
NPERS_OTA+NPERS_APREO)
)
# Exportar data frame con la identificación de posibles casos de imputación -------------------------------
if(avance==100){
write.csv(final,paste0(directorio,"/results/S2_identificacion_alertas/EMMET_PANEL_alertas_",meses[mes],anio,".csv"),row.names=F,fileEncoding = "latin1")
}else{
write.csv(final,paste0(directorio,"/results/S2_identificacion_alertas/EMMET_PANEL_alertas_",meses[mes],anio,"_",avance,".csv"),row.names=F,fileEncoding = "latin1")
}
library(dplyr)
library(readxl)
library(readr)
library(data.table)
library(VIM)
library(forecast)
library(openxlsx)
library(imputeTS)
source("https://raw.githubusercontent.com/sub-dane/EMMET/main/R/utils.R")
#cargar base estandarizada
datos <- read.csv(paste0(directorio,"/results/S1_integracion/EMMET_PANEL_trabajo_original_",meses[mes],anio,".csv"),fileEncoding = "latin1")
#crear una copia de la base de datos
datoscom=datos
#crear un data frame con las variables de interes
datos=datos %>% select(ANIO,MES,NOVEDAD,DEPARTAMENTO,NOMBREMPIO,
NORDEST,NOMBRE_ESTABLECIMIENTO,DOMINIO_39,CLASE_CIIU4,
NPERS_EP,AJU_SUELD_EP,NPERS_ET,
AJU_SUELD_ET,NPERS_ETA,
AJU_SUELD_ETA,NPERS_APREA,AJU_SUELD_APREA,
NPERS_OP,AJU_SUELD_OP,NPERS_OT,
AJU_SUELD_OT,NPERS_OTA,
AJU_SUELD_OTA,NPERS_APREO,AJU_SUELD_APREO,
AJU_HORAS_ORDI,AJU_HORAS_EXT,
AJU_PRODUCCION,AJU_VENTASIN,
AJU_VENTASEX,EXISTENCIAS)
#convertir la base en data frame y convertir variables de año y mes en numéricas
datos<- as.data.frame(datos)
datos$MES=as.numeric(datos$MES)
datos$ANIO=as.numeric(datos$ANIO)
for (i in variablesinte) {
datos[,i] <- as.numeric(datos[,i])
datos[,i] <- ifelse(is.na(datos[,i]),0,datos[,i])
}
#Dejar la base sin los datos del mes actual
datos <- filter(datos, !(ANIO == anio & MES == mes))
#cargar la base de alertas
if(avance==100){
wowimp=read.csv(paste0(directorio,"/results/S2_identificacion_alertas/EMMET_PANEL_alertas_",meses[mes],anio,".csv"),fileEncoding = "latin1")
}else{
wowimp=read.csv(paste0(directorio,"/results/S2_identificacion_alertas/EMMET_PANEL_alertas_",meses[mes],anio,"_",avance,".csv"),fileEncoding = "latin1")
}
wowimp=as.data.frame(wowimp)
for (i in variablesinte) {
wowimp[,i] <- as.numeric(wowimp[,i])
wowimp[,i] <- ifelse(is.na(wowimp[,i]),0,wowimp[,i])
}
# Convertir los datos que son casos de imputación en NA
for (i in variablesinte) {
wowimp[!grepl("continua", tolower(wowimp[, paste0(i, "_caso_de_imputacion")])),i]<- NA
}
wowimp=wowimp %>% select(ANIO,MES,NOVEDAD,DEPARTAMENTO,NOMBREMPIO,
NORDEST,NOMBRE_ESTABLECIMIENTO,DOMINIO_39,CLASE_CIIU4,
NPERS_EP,AJU_SUELD_EP,NPERS_ET,
AJU_SUELD_ET,NPERS_ETA,
AJU_SUELD_ETA,NPERS_APREA,AJU_SUELD_APREA,
NPERS_OP,AJU_SUELD_OP,NPERS_OT,
AJU_SUELD_OT,NPERS_OTA,
AJU_SUELD_OTA,NPERS_APREO,AJU_SUELD_APREO,
AJU_HORAS_ORDI,AJU_HORAS_EXT,
AJU_PRODUCCION,AJU_VENTASIN,
AJU_VENTASEX,EXISTENCIAS)
#Combinar la base sin el mes actual con la base de alertas
base_imputar=rbind(datos,wowimp)
# imputacion ---------------------------------------------------------------------
vec=c(0,0,0,0,1,1,0)
#base_imputar=rbind(datos,wowimp)
base_imputar2=base_imputar %>% filter((MES>=mes & ANIO==anio-2) |(ANIO==anio-1)|(MES<=mes & ANIO==anio))
set.seed(11)
for (i in cap3) {
ids=wowimp[which(!(complete.cases(wowimp[,paste0(i)]))),"NORDEST"]
for (j in ids) {
mmm <- base_imputar2 %>% filter(NORDEST==j) %>%
as.data.frame()
model_p <- auto.arima(as.ts(mmm[,i]))
pru_mod=(model_p$arma==vec)
if(sum(pru_mod)<7){
model <- model_p
pred <- forecast(model, h = 1)$mean
}else{
kalman <- na_kalman((mmm[,i]))
pred <-tail(kalman,1)
}
base_imputar2[base_imputar2$NORDEST==j & base_imputar2$ANIO==anio & base_imputar2$MES==mes,paste0(i)]=pred[1]
}
}
avance
datos <- read.csv(paste0(directorio,"/results/S1_integracion/EMMET_PANEL_trabajo_original_",meses[mes],anio,".csv"),fileEncoding = "latin1")
#crear una copia de la base de datos
datoscom=datos
#crear un data frame con las variables de interes
datos=datos %>% select(ANIO,MES,NOVEDAD,DEPARTAMENTO,NOMBREMPIO,
NORDEST,NOMBRE_ESTABLECIMIENTO,DOMINIO_39,CLASE_CIIU4,
NPERS_EP,AJU_SUELD_EP,NPERS_ET,
AJU_SUELD_ET,NPERS_ETA,
AJU_SUELD_ETA,NPERS_APREA,AJU_SUELD_APREA,
NPERS_OP,AJU_SUELD_OP,NPERS_OT,
AJU_SUELD_OT,NPERS_OTA,
AJU_SUELD_OTA,NPERS_APREO,AJU_SUELD_APREO,
AJU_HORAS_ORDI,AJU_HORAS_EXT,
AJU_PRODUCCION,AJU_VENTASIN,
AJU_VENTASEX,EXISTENCIAS)
#convertir la base en data frame y convertir variables de año y mes en numéricas
datos<- as.data.frame(datos)
datos$MES=as.numeric(datos$MES)
datos$ANIO=as.numeric(datos$ANIO)
for (i in variablesinte) {
datos[,i] <- as.numeric(datos[,i])
datos[,i] <- ifelse(is.na(datos[,i]),0,datos[,i])
}
#Dejar la base sin los datos del mes actual
datos <- filter(datos, !(ANIO == anio & MES == mes))
#cargar la base de alertas
if(avance==100){
wowimp=read.csv(paste0(directorio,"/results/S2_identificacion_alertas/EMMET_PANEL_alertas_",meses[mes],anio,".csv"),fileEncoding = "latin1")
}else{
wowimp=read.csv(paste0(directorio,"/results/S2_identificacion_alertas/EMMET_PANEL_alertas_",meses[mes],anio,"_",avance,".csv"),fileEncoding = "latin1")
}
wowimp=as.data.frame(wowimp)
for (i in variablesinte) {
wowimp[,i] <- as.numeric(wowimp[,i])
wowimp[,i] <- ifelse(is.na(wowimp[,i]),0,wowimp[,i])
}
# Convertir los datos que son casos de imputación en NA
for (i in variablesinte) {
wowimp[!grepl("continua", tolower(wowimp[, paste0(i, "_caso_de_imputacion")])),i]<- NA
}
wowimp=wowimp %>% select(ANIO,MES,NOVEDAD,DEPARTAMENTO,NOMBREMPIO,
NORDEST,NOMBRE_ESTABLECIMIENTO,DOMINIO_39,CLASE_CIIU4,
NPERS_EP,AJU_SUELD_EP,NPERS_ET,
AJU_SUELD_ET,NPERS_ETA,
AJU_SUELD_ETA,NPERS_APREA,AJU_SUELD_APREA,
NPERS_OP,AJU_SUELD_OP,NPERS_OT,
AJU_SUELD_OT,NPERS_OTA,
AJU_SUELD_OTA,NPERS_APREO,AJU_SUELD_APREO,
AJU_HORAS_ORDI,AJU_HORAS_EXT,
AJU_PRODUCCION,AJU_VENTASIN,
AJU_VENTASEX,EXISTENCIAS)
#Combinar la base sin el mes actual con la base de alertas
base_imputar=rbind(datos,wowimp)
# imputacion ---------------------------------------------------------------------
vec=c(0,0,0,0,1,1,0)
str(datos)
#base_imputar=rbind(datos,wowimp)
base_imputar2=base_imputar %>% filter((MES>=mes & ANIO==anio-2) |(ANIO==anio-1)|(MES<=mes & ANIO==anio))
set.seed(11)
for (i in cap3) {
ids=wowimp[which(!(complete.cases(wowimp[,paste0(i)]))),"NORDEST"]
for (j in ids) {
mmm <- base_imputar2 %>% filter(NORDEST==j) %>%
as.data.frame()
model_p <- auto.arima(as.ts(mmm[,i]))
pru_mod=(model_p$arma==vec)
if(sum(pru_mod)<7){
model <- model_p
pred <- forecast(model, h = 1)$mean
}else{
kalman <- na_kalman((mmm[,i]))
pred <-tail(kalman,1)
}
base_imputar2[base_imputar2$NORDEST==j & base_imputar2$ANIO==anio & base_imputar2$MES==mes,paste0(i)]=pred[1]
}
}
i
j
ids=wowimp[which(!(complete.cases(wowimp[,paste0(i)]))),"NORDEST"]
mmm <- base_imputar2 %>% filter(NORDEST==j) %>%
as.data.frame()
mmm
anio-2
mes
View(base_imputar2)
View(base_imputar2)
table(base_imputar2$NORDEST)
#cargar base estandarizada
datos <- read.csv(paste0(directorio,"/results/S1_integracion/EMMET_PANEL_trabajo_original_",meses[mes],anio,".csv"),fileEncoding = "latin1")
# Concatenar con Base Parametrica ---------------------------------------------
base_panel <- base_parametrica %>%
left_join(base_logistica %>% select(!c(NOMBRE_ESTABLECIMIENTO,DEPARTAMENTO)),
by=c("ID_NUMORD"="NORDEST","ANIO"="ANIO","MES"="MES"))
base_panel <- base_panel %>%
rename_with(~ gsub("\\.x$", "", .), ends_with(".x")) %>%
select(-ends_with(".y")) %>%
rename(NORDEST=ID_NUMORD,NOMBRE_ESTABLECIMIENTO=NOMBRE_ESTAB,DEPARTAMENTO=NOMBREDPTO)
# Estandarizacion nombres Departamento y Municipio ------------------------------------------------
base_panel=base_panel %>%
mutate_at(vars("DOMINIO39_DESCRIP"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_panel<-base_panel %>%
mutate(
AJU_VENTASIN=ifelse(is.na(AJU_VENTASIN),0,AJU_VENTASIN),
AJU_VENTASEX=ifelse(is.na(AJU_VENTASEX),0,AJU_VENTASEX),
NPERS_EP=ifelse(is.na(NPERS_EP),0,NPERS_EP),
NPERS_ET=ifelse(is.na(NPERS_ET),0,NPERS_ET),
NPERS_ETA=ifelse(is.na(NPERS_ETA),0,NPERS_ETA),
NPERS_APREA=ifelse(is.na(NPERS_APREA),0,NPERS_APREA),
NPERS_OP=ifelse(is.na(NPERS_OP),0,NPERS_OP),
NPERS_OT=ifelse(is.na(NPERS_OT),0,NPERS_OT),
NPERS_OTA=ifelse(is.na(NPERS_OTA),0,NPERS_OTA),
NPERS_APREO=ifelse(is.na(NPERS_APREO),0,NPERS_APREO),
TOTPERS=ifelse(is.na(TOTPERS),0,TOTPERS),
TOTPERS_ADM=ifelse(is.na(TOTPERS_ADM),0,TOTPERS_ADM),
TOTSUELD_ADM=ifelse(is.na(TOTSUELD_ADM),0,TOTSUELD_ADM),
TOTSUELD_PRO=ifelse(is.na(TOTSUELD_PRO),0,TOTSUELD_PRO),
AJU_SUELD_EP=ifelse(is.na(AJU_SUELD_EP),0,AJU_SUELD_EP),
AJU_SUELD_ET=ifelse(is.na(AJU_SUELD_ET),0,AJU_SUELD_ET),
AJU_SUELD_ETA=ifelse(is.na(AJU_SUELD_ETA),0,AJU_SUELD_ETA),
AJU_SUELD_APREA=ifelse(is.na(AJU_SUELD_APREA),0,AJU_SUELD_APREA),
AJU_SUELD_OP=ifelse(is.na(AJU_SUELD_OP),0,AJU_SUELD_OP),
AJU_SUELD_OT=ifelse(is.na(AJU_SUELD_OT),0,AJU_SUELD_OT),
AJU_SUELD_OTA=ifelse(is.na(AJU_SUELD_OTA),0,AJU_SUELD_OTA),
AJU_SUELD_APREO=ifelse(is.na(AJU_SUELD_APREO),0,AJU_SUELD_APREO),
AJU_HORAS_ORDI=ifelse(is.na(AJU_HORAS_ORDI),0,AJU_HORAS_ORDI),
AJU_HORAS_EXT=ifelse(is.na(AJU_HORAS_EXT),0,AJU_HORAS_EXT),
AJU_PRODUCCION=ifelse(is.na(AJU_PRODUCCION),0,AJU_PRODUCCION),
EXISTENCIAS=ifelse(is.na(EXISTENCIAS),0,EXISTENCIAS),
AJU_TOTAL_VENTAS=ifelse(is.na(AJU_TOTAL_VENTAS),0,AJU_TOTAL_VENTAS)
)
View(base_panel)
write.csv(base_panel,paste0(directorio,"/results/S1_integracion/EMMET_PANEL_trabajo_original_",meses[mes],anio,".csv"),row.names=F,fileEncoding = "latin1")
#cargar la base de datos
base_panel <-  fread(paste0(directorio,"/results/S1_integracion/EMMET_PANEL_trabajo_original_",meses[mes],anio,".csv"), encoding = "Latin-1")
#cargar base estandarizada
datos <- read.csv(paste0(directorio,"/results/S1_integracion/EMMET_PANEL_trabajo_original_",meses[mes],anio,".csv"),fileEncoding = "latin1")
library(readr)
library(readxl)
library(stringr)
library(tidyr)
library(dplyr)
library(data.table)
library(writexl)
library(openxlsx)
source("https://raw.githubusercontent.com/sub-dane/EMMET/main/R/utils.R")
# Cargar bases necesarias y aplicar funcion de formato de nombres
#Cambio: se agrea , sheet = "LOGISTICA"
base_logistica          <- read.xlsx(paste0(directorio,"/data/",anio,"/",meses[mes],"/EMMET_PANEL_imputada_",meses[mes],anio,".xlsx"))
colnames(base_logistica) <- colnames_format(base_logistica)
#cambia en las columnas que contienen la palabra "OBSE" cualquier caracter que no sea alfanumerico por un espacio
base_logistica           <-  base_logistica %>%
mutate_at(vars(contains("OBSER")),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_logistica           <-  base_logistica %>%
mutate_at(vars("DOMINIO39_DESCRIP"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_logistica           <-  base_logistica %>%
mutate_at(vars("NOMBRE_ESTABLECIMIENTO"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_logistica           <-  base_logistica %>%
mutate_at(vars("DEPARTAMENTO"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
parametro <- read.xlsx(paste0(directorio,"/results/S6_boletin/parametros_boletin.xlsx"), sheet = "Vector")
base_logistica           <-  base_logistica %>%
select(parametro$Var_inicial)
write.csv(base_logistica,paste0(directorio,"/data/",anio,"/",meses[mes],"/EMMET_PANEL_imputada_",meses[mes],anio,".csv"),row.names=F)
base_logistica          <-  read_csv(paste0(directorio,"/data/",anio,"/",meses[mes],"/EMMET_PANEL_imputada_",meses[mes],anio,".csv"))
colnames(base_logistica) <- colnames_format(base_logistica)
base_logistica$MES=as.numeric(base_logistica$MES)
base_logistica$ANIO=as.numeric(base_logistica$ANIO)
#Cargar bases insumo
base_parametrica           <- read.xlsx(paste0(directorio,"/data/",anio,"/",meses[mes],"/EMMET_parametrica_historico.xlsx"))
colnames(base_parametrica) <- colnames_format(base_parametrica)
base_parametrica$ID_NUMORD=as.character(base_parametrica$ID_NUMORD)
# Concatenar base Logistica con base Original ----------------------------------------------------
#base_panel <- rbind.data.frame(base_logistica,base_original)
base_logistica$NORDEST=as.character(base_logistica$NORDEST)
# Concatenar con Base Parametrica ---------------------------------------------
base_panel <- base_parametrica %>%
left_join(base_logistica %>% select(!c(NOMBRE_ESTABLECIMIENTO,DEPARTAMENTO)),
by=c("ID_NUMORD"="NORDEST","ANIO"="ANIO","MES"="MES"))
base_panel <- base_panel %>%
rename_with(~ gsub("\\.x$", "", .), ends_with(".x")) %>%
select(-ends_with(".y")) %>%
rename(NORDEST=ID_NUMORD,NOMBRE_ESTABLECIMIENTO=NOMBRE_ESTAB,DEPARTAMENTO=NOMBREDPTO)
# Estandarizacion nombres Departamento y Municipio ------------------------------------------------
base_panel=base_panel %>%
mutate_at(vars("DOMINIO39_DESCRIP"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
# Estandarizar Variables Numericas ----------------------------------------
base_panel<-base_panel %>%
mutate(
AJU_VENTASIN=ifelse(is.na(AJU_VENTASIN),0,AJU_VENTASIN),
AJU_VENTASEX=ifelse(is.na(AJU_VENTASEX),0,AJU_VENTASEX),
NPERS_EP=ifelse(is.na(NPERS_EP),0,NPERS_EP),
NPERS_ET=ifelse(is.na(NPERS_ET),0,NPERS_ET),
NPERS_ETA=ifelse(is.na(NPERS_ETA),0,NPERS_ETA),
NPERS_APREA=ifelse(is.na(NPERS_APREA),0,NPERS_APREA),
NPERS_OP=ifelse(is.na(NPERS_OP),0,NPERS_OP),
NPERS_OT=ifelse(is.na(NPERS_OT),0,NPERS_OT),
NPERS_OTA=ifelse(is.na(NPERS_OTA),0,NPERS_OTA),
NPERS_APREO=ifelse(is.na(NPERS_APREO),0,NPERS_APREO),
TOTPERS=ifelse(is.na(TOTPERS),0,TOTPERS),
TOTPERS_ADM=ifelse(is.na(TOTPERS_ADM),0,TOTPERS_ADM),
TOTSUELD_ADM=ifelse(is.na(TOTSUELD_ADM),0,TOTSUELD_ADM),
TOTSUELD_PRO=ifelse(is.na(TOTSUELD_PRO),0,TOTSUELD_PRO),
AJU_SUELD_EP=ifelse(is.na(AJU_SUELD_EP),0,AJU_SUELD_EP),
AJU_SUELD_ET=ifelse(is.na(AJU_SUELD_ET),0,AJU_SUELD_ET),
AJU_SUELD_ETA=ifelse(is.na(AJU_SUELD_ETA),0,AJU_SUELD_ETA),
AJU_SUELD_APREA=ifelse(is.na(AJU_SUELD_APREA),0,AJU_SUELD_APREA),
AJU_SUELD_OP=ifelse(is.na(AJU_SUELD_OP),0,AJU_SUELD_OP),
AJU_SUELD_OT=ifelse(is.na(AJU_SUELD_OT),0,AJU_SUELD_OT),
AJU_SUELD_OTA=ifelse(is.na(AJU_SUELD_OTA),0,AJU_SUELD_OTA),
AJU_SUELD_APREO=ifelse(is.na(AJU_SUELD_APREO),0,AJU_SUELD_APREO),
AJU_HORAS_ORDI=ifelse(is.na(AJU_HORAS_ORDI),0,AJU_HORAS_ORDI),
AJU_HORAS_EXT=ifelse(is.na(AJU_HORAS_EXT),0,AJU_HORAS_EXT),
AJU_PRODUCCION=ifelse(is.na(AJU_PRODUCCION),0,AJU_PRODUCCION),
EXISTENCIAS=ifelse(is.na(EXISTENCIAS),0,EXISTENCIAS),
AJU_TOTAL_VENTAS=ifelse(is.na(AJU_TOTAL_VENTAS),0,AJU_TOTAL_VENTAS)
)
# Exportar bases de Datos integradas -------------------------------------------------
write.csv(base_panel,paste0(directorio,"/results/S1_integracion/EMMET_PANEL_trabajo_original_",meses[mes],anio,".csv"),row.names=F,fileEncoding = "latin1")
#cargar la base de datos
base_panel <-  fread(paste0(directorio,"/results/S1_integracion/EMMET_PANEL_trabajo_original_",meses[mes],anio,".csv"), encoding = "Latin-1")
?read.csv
View(base_parametrica$ID_NUMORD==847293)
View(base_parametrica[base_parametrica$ID_NUMORD==847293,])
# Concatenar con Base Parametrica ---------------------------------------------
base_panel <- base_parametrica %>%
left_join(base_logistica %>% select(!c(NOMBRE_ESTABLECIMIENTO,DEPARTAMENTO)),
by=c("ID_NUMORD"="NORDEST","ANIO"="ANIO","MES"="MES"))
base_panel <- base_panel %>%
rename_with(~ gsub("\\.x$", "", .), ends_with(".x")) %>%
select(-ends_with(".y")) %>%
rename(NORDEST=ID_NUMORD,NOMBRE_ESTABLECIMIENTO=NOMBRE_ESTAB,DEPARTAMENTO=NOMBREDPTO)
# Estandarizacion nombres Departamento y Municipio ------------------------------------------------
base_panel           <-  base_panel %>%
mutate_at(vars(contains("OBSER")),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_panel           <-  base_panel %>%
mutate_at(vars("DOMINIO39_DESCRIP"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_panel           <-  base_panel %>%
mutate_at(vars("NOMBRE_ESTABLECIMIENTO"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_panel           <-  base_panel %>%
mutate_at(vars("DEPARTAMENTO"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
View(base_panel[base_panel$NORDEST==847293,])
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
library(stringi)
# Supongamos que quieres corregir la columna "nombre"
base_panel$NOMBRE_ESTABLECIMIENTO <- stri_trans_general(datos$NOMBRE_ESTABLECIMIENTO, "latin-ascii")
# Supongamos que quieres corregir la columna "nombre"
base_panel$NOMBRE_ESTABLECIMIENTO <- stri_trans_general(base_panel$NOMBRE_ESTABLECIMIENTO, "latin-ascii")
View(base_panel[base_panel$NORDEST==847293,])
View(base_panel[base_panel$NORDEST=="1355",])
View(base_panel)
# Concatenar con Base Parametrica ---------------------------------------------
base_panel <- base_parametrica %>%
left_join(base_logistica %>% select(!c(NOMBRE_ESTABLECIMIENTO,DEPARTAMENTO)),
by=c("ID_NUMORD"="NORDEST","ANIO"="ANIO","MES"="MES"))
base_panel <- base_panel %>%
rename_with(~ gsub("\\.x$", "", .), ends_with(".x")) %>%
select(-ends_with(".y")) %>%
rename(NORDEST=ID_NUMORD,NOMBRE_ESTABLECIMIENTO=NOMBRE_ESTAB,DEPARTAMENTO=NOMBREDPTO)
# Concatenar con Base Parametrica ---------------------------------------------
base_panel <- base_parametrica %>%
left_join(base_logistica %>% select(!c(NOMBRE_ESTABLECIMIENTO,DEPARTAMENTO)),
by=c("ID_NUMORD"="NORDEST","ANIO"="ANIO","MES"="MES"))
library(readr)
library(readxl)
library(stringr)
library(tidyr)
library(dplyr)
library(data.table)
library(writexl)
library(openxlsx)
source("https://raw.githubusercontent.com/sub-dane/EMMET/main/R/utils.R")
base_logistica$NORDEST=as.character(base_logistica$NORDEST)
# Concatenar con Base Parametrica ---------------------------------------------
base_panel <- base_parametrica %>%
left_join(base_logistica %>% select(!c(NOMBRE_ESTABLECIMIENTO,DEPARTAMENTO)),
by=c("ID_NUMORD"="NORDEST","ANIO"="ANIO","MES"="MES"))
base_panel <- base_panel %>%
rename_with(~ gsub("\\.x$", "", .), ends_with(".x")) %>%
select(-ends_with(".y")) %>%
rename(NORDEST=ID_NUMORD,NOMBRE_ESTABLECIMIENTO=NOMBRE_ESTAB,DEPARTAMENTO=NOMBREDPTO)
# Estandarizacion nombres Departamento y Municipio ------------------------------------------------
base_panel           <-  base_panel %>%
mutate_at(vars(contains("OBSER")),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_panel           <-  base_panel %>%
mutate_at(vars("DOMINIO39_DESCRIP"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_panel           <-  base_panel %>%
mutate_at(vars("NOMBRE_ESTABLECIMIENTO"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_panel           <-  base_panel %>%
mutate_at(vars("DEPARTAMENTO"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
View(base_panel[base_panel$NORDEST=="1355",])
?stri_trans_general
# Supongamos que quieres corregir la columna "nombre"
base_panel$NOMBRE_ESTABLECIMIENTO <- stri_trans_general(base_panel$NOMBRE_ESTABLECIMIENTO, "latin-1")
# Supongamos que quieres corregir la columna "nombre"
base_panel$NOMBRE_ESTABLECIMIENTO <- stri_trans_general(base_panel$NOMBRE_ESTABLECIMIENTO, "latin1")
#cargar base estandarizada
datos <- read.csv(paste0(directorio,"/results/S1_integracion/EMMET_PANEL_trabajo_original_",meses[mes],anio,".csv"),fileEncoding = "latin1")
#cargar base estandarizada
datos <- read.csv(paste0(directorio,"/results/S1_integracion/EMMET_PANEL_trabajo_original_",meses[mes],anio,".csv"),fileEncoding = "UTF-8")
latin1
#cargar base estandarizada
datos <- read.csv(paste0(directorio,"/results/S1_integracion/EMMET_PANEL_trabajo_original_",meses[mes],anio,".csv"),fileEncoding = "latin1")
# Supongamos que quieres corregir la columna "nombre"
base_panel$NOMBRE_ESTABLECIMIENTO <- stri_trans_general(base_panel$NOMBRE_ESTABLECIMIENTO, "latin1")
# Supongamos que quieres corregir la columna "nombre"
base_panel$NOMBRE_ESTABLECIMIENTO <- stri_trans_general(base_panel$NOMBRE_ESTABLECIMIENTO, "latin-ascii")
View(base_panel[base_panel$NORDEST=="1355",])
library(readr)
library(readxl)
library(stringr)
library(tidyr)
library(dplyr)
library(data.table)
library(writexl)
library(openxlsx)
source("https://raw.githubusercontent.com/sub-dane/EMMET/main/R/utils.R")
# Cargar bases necesarias y aplicar funcion de formato de nombres
#Cambio: se agrea , sheet = "LOGISTICA"
base_logistica          <- read.xlsx(paste0(directorio,"/data/",anio,"/",meses[mes],"/EMMET_PANEL_imputada_",meses[mes],anio,".xlsx"))
colnames(base_logistica) <- colnames_format(base_logistica)
#cambia en las columnas que contienen la palabra "OBSE" cualquier caracter que no sea alfanumerico por un espacio
base_logistica           <-  base_logistica %>%
mutate_at(vars(contains("OBSER")),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_logistica           <-  base_logistica %>%
mutate_at(vars("DOMINIO39_DESCRIP"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_logistica           <-  base_logistica %>%
mutate_at(vars("NOMBRE_ESTABLECIMIENTO"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_logistica           <-  base_logistica %>%
mutate_at(vars("DEPARTAMENTO"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
parametro <- read.xlsx(paste0(directorio,"/results/S6_boletin/parametros_boletin.xlsx"), sheet = "Vector")
base_logistica           <-  base_logistica %>%
select(parametro$Var_inicial)
write.csv(base_logistica,paste0(directorio,"/data/",anio,"/",meses[mes],"/EMMET_PANEL_imputada_",meses[mes],anio,".csv"),row.names=F)
base_logistica          <-  read_csv(paste0(directorio,"/data/",anio,"/",meses[mes],"/EMMET_PANEL_imputada_",meses[mes],anio,".csv"))
colnames(base_logistica) <- colnames_format(base_logistica)
base_logistica$MES=as.numeric(base_logistica$MES)
base_logistica$ANIO=as.numeric(base_logistica$ANIO)
#Cargar bases insumo
base_parametrica           <- read.xlsx(paste0(directorio,"/data/",anio,"/",meses[mes],"/EMMET_parametrica_historico.xlsx"))
colnames(base_parametrica) <- colnames_format(base_parametrica)
base_parametrica$ID_NUMORD=as.character(base_parametrica$ID_NUMORD)
# Concatenar base Logistica con base Original ----------------------------------------------------
#base_panel <- rbind.data.frame(base_logistica,base_original)
base_logistica$NORDEST=as.character(base_logistica$NORDEST)
# Concatenar con Base Parametrica ---------------------------------------------
base_panel <- base_parametrica %>%
left_join(base_logistica %>% select(!c(NOMBRE_ESTABLECIMIENTO,DEPARTAMENTO)),
by=c("ID_NUMORD"="NORDEST","ANIO"="ANIO","MES"="MES"))
base_panel <- base_panel %>%
rename_with(~ gsub("\\.x$", "", .), ends_with(".x")) %>%
select(-ends_with(".y")) %>%
rename(NORDEST=ID_NUMORD,NOMBRE_ESTABLECIMIENTO=NOMBRE_ESTAB,DEPARTAMENTO=NOMBREDPTO)
# Estandarizacion nombres Departamento y Municipio ------------------------------------------------
base_panel           <-  base_panel %>%
mutate_at(vars(contains("OBSER")),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_panel           <-  base_panel %>%
mutate_at(vars("DOMINIO39_DESCRIP"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_panel           <-  base_panel %>%
mutate_at(vars("NOMBRE_ESTABLECIMIENTO"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
base_panel           <-  base_panel %>%
mutate_at(vars("DEPARTAMENTO"),~str_replace_all(.,pattern="[^[:alnum:]]",replacement=" "))
# Estandarizar Variables Numericas ----------------------------------------
base_panel<-base_panel %>%
mutate(
AJU_VENTASIN=ifelse(is.na(AJU_VENTASIN),0,AJU_VENTASIN),
AJU_VENTASEX=ifelse(is.na(AJU_VENTASEX),0,AJU_VENTASEX),
NPERS_EP=ifelse(is.na(NPERS_EP),0,NPERS_EP),
NPERS_ET=ifelse(is.na(NPERS_ET),0,NPERS_ET),
NPERS_ETA=ifelse(is.na(NPERS_ETA),0,NPERS_ETA),
NPERS_APREA=ifelse(is.na(NPERS_APREA),0,NPERS_APREA),
NPERS_OP=ifelse(is.na(NPERS_OP),0,NPERS_OP),
NPERS_OT=ifelse(is.na(NPERS_OT),0,NPERS_OT),
NPERS_OTA=ifelse(is.na(NPERS_OTA),0,NPERS_OTA),
NPERS_APREO=ifelse(is.na(NPERS_APREO),0,NPERS_APREO),
TOTPERS=ifelse(is.na(TOTPERS),0,TOTPERS),
TOTPERS_ADM=ifelse(is.na(TOTPERS_ADM),0,TOTPERS_ADM),
TOTSUELD_ADM=ifelse(is.na(TOTSUELD_ADM),0,TOTSUELD_ADM),
TOTSUELD_PRO=ifelse(is.na(TOTSUELD_PRO),0,TOTSUELD_PRO),
AJU_SUELD_EP=ifelse(is.na(AJU_SUELD_EP),0,AJU_SUELD_EP),
AJU_SUELD_ET=ifelse(is.na(AJU_SUELD_ET),0,AJU_SUELD_ET),
AJU_SUELD_ETA=ifelse(is.na(AJU_SUELD_ETA),0,AJU_SUELD_ETA),
AJU_SUELD_APREA=ifelse(is.na(AJU_SUELD_APREA),0,AJU_SUELD_APREA),
AJU_SUELD_OP=ifelse(is.na(AJU_SUELD_OP),0,AJU_SUELD_OP),
AJU_SUELD_OT=ifelse(is.na(AJU_SUELD_OT),0,AJU_SUELD_OT),
AJU_SUELD_OTA=ifelse(is.na(AJU_SUELD_OTA),0,AJU_SUELD_OTA),
AJU_SUELD_APREO=ifelse(is.na(AJU_SUELD_APREO),0,AJU_SUELD_APREO),
AJU_HORAS_ORDI=ifelse(is.na(AJU_HORAS_ORDI),0,AJU_HORAS_ORDI),
AJU_HORAS_EXT=ifelse(is.na(AJU_HORAS_EXT),0,AJU_HORAS_EXT),
AJU_PRODUCCION=ifelse(is.na(AJU_PRODUCCION),0,AJU_PRODUCCION),
EXISTENCIAS=ifelse(is.na(EXISTENCIAS),0,EXISTENCIAS),
AJU_TOTAL_VENTAS=ifelse(is.na(AJU_TOTAL_VENTAS),0,AJU_TOTAL_VENTAS)
)
# Exportar bases de Datos integradas -------------------------------------------------
write.csv(base_panel,paste0(directorio,"/results/S1_integracion/EMMET_PANEL_trabajo_original_",meses[mes],anio,".csv"),row.names=F,fileEncoding = "latin1")
#cargar la base de datos
base_panel <-  fread(paste0(directorio,"/results/S1_integracion/EMMET_PANEL_trabajo_original_",meses[mes],anio,".csv"), encoding = "Latin-1")
usethis::create_github_token()
install.packages(usethis)
install.packages("usethis")
usethis::create_github_token()
gitcreds::gitcreds_set()
install.packages("gitcreds")
install.packages("gitcreds")
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
git config --global user.email "juespinosao@unal.edu.co"
git config --global user.email "juespinosao@unal.edu.co"
